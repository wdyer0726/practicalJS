// v10 instead of specifying which position of todo list to delete. give each item in the todo list array its own delete button
  // there should be a way to create delete buttons
  // there should be a delete button for each todo
  // each li should have an id that has the todo position
  // delete buttons should have access to the todo id
  // clicking delete should update todoList.todos and the DOM
  
//functions within functions
  //create function runWithDebugger(ourFunction); this will be useful and same repetitive entries
    //debugger;
    //ourfunction();
    // runWithDebugger(copy paste function)
    
  // setTimeout(function() {}, time (ms)) this built in function will run a function for a set amount of time in milliseconds
  
  // on all arrays: array.forEach() pass a function through and it will perform the function for each item in the array
  
  // Higher order functions
    // functions that accept other functions
    // enhance the behavior of other functions
  // Callback functions
    // functions that are passed into higher order functions
  

var todoList = {
  todos: [],
  addTodo: function(todoText) {
    this.todos.push({
      todoText: todoText,
      completed: false
    });
  },
  changeTodo: function(position, todoText) {
    this.todos[position].todoText = todoText;
  },
  deleteTodo: function(position) {
    this.todos.splice(position, 1);
  },
  toggleCompleted: function(position) {
    var todo = this.todos[position];
    todo.completed = !todo.completed;
  },
  toggleAll: function() {
    var totalTodos = this.todos.length;
    var completedTodos = 0;
    
    // Get number of completed todos.
    for (var i = 0; i < totalTodos; i++) {
      if (this.todos[i].completed === true) {
        completedTodos++;
      }
    }
    
    // Case 1: If everythingâ€™s true, make everything false.
    if (completedTodos === totalTodos) {
      for (var i = 0; i < totalTodos; i++) {
        this.todos[i].completed = false;
      }
    // Case 2: Otherwise, make everything true.
    } else {
      for (var i = 0; i < totalTodos; i++) {
        this.todos[i].completed = true;
      }      
    }
  }
};

var handlers = {
  addTodo: function() {
    var addTodoTextInput = document.getElementById('addTodoTextInput');
    todoList.addTodo(addTodoTextInput.value);
    addTodoTextInput.value = '';
    view.displayTodos();
  },
  changeTodo: function() {
    var changeTodoPositionInput = document.getElementById('changeTodoPositionInput');
    var changeTodoTextInput = document.getElementById('changeTodoTextInput');
    todoList.changeTodo(changeTodoPositionInput.valueAsNumber, changeTodoTextInput.value);
    changeTodoPositionInput.value = '';
    changeTodoTextInput.value = '';
    view.displayTodos();
  },
  deleteTodo: function(position) {
    todoList.deleteTodo(position);
    view.displayTodos();
  },
  toggleCompleted: function() {
    var toggleCompletedPositionInput = document.getElementById('toggleCompletedPositionInput');
    todoList.toggleCompleted(toggleCompletedPositionInput.valueAsNumber);
    toggleCompletedPositionInput.value = '';
    view.displayTodos();
  },
  toggleAll: function() {
    todoList.toggleAll();
    view.displayTodos();
  }  
};

var view = {
  displayTodos: function() {
    var todosUl = document.querySelector('ul');
    todosUl.innerHTML = '';
    for (var i = 0; i < todoList.todos.length; i++) {
      var todoLi = document.createElement('li');
      var todo = todoList.todos[i];
      var todoTextWithCompletion = '';

      if (todo.completed === true) {
        todoTextWithCompletion = '(x) ' + todo.todoText;
      } else {
        todoTextWithCompletion = '( ) ' + todo.todoText;
      }
      
      todoLi.id = i;
      todoLi.textContent = todoTextWithCompletion;
      todoLi.appendChild(this.createDeleteButton());
      todosUl.appendChild(todoLi);
    }
  },
  createDeleteButton: function() {
    var deleteButton = document.createElement('button');
    deleteButton.textContent = 'Delete';
    // define a class name, basically a way to identify non-unique delete buttons (aka more than one element)
    deleteButton.className = 'deleteButton'
    return deleteButton;
  },
  setUpEventListeners: function () {
    var todosUl = document.querySelector('ul');
    
    todosUl.addEventListener('click', function (event) {
      //console.log(event.target.parentNode.id); 
        // get the event (click on delete button), get the target (what was clicked), 
        // get the list item that the delete button is associated with (parentNode),
        // get the id that is assigned to that list item
        // will display position in todos array
      var elementClicked = event.target;
      // check if elementClicked is a delete button
      if (elementClicked.className === 'deleteButton') {
        // Run handlers.deletetodo(position)
        handlers.deleteTodo(parseInt(elementClicked.parentNode.id));
        //parseInt() will take a string (number string) and turn it into an number
      }
    });
  }
};

view.setUpEventListeners();

















